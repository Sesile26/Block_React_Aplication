{"version":3,"sources":["api/api.ts","api/posts.ts","store/actions.ts","components/AddNewPost/AddNewPost.tsx","api/comments.ts","store/selectors.ts","components/AddNewComment/AddNewComment.tsx","components/PostDetails/PostDetails.tsx","components/PostList/PostList.tsx","App.tsx","store/index.ts","index.tsx"],"names":["API_URL","getPosts","a","fetch","response","json","getPostById","postId","addNewPost","title","body","method","headers","JSON","stringify","id","Math","floor","random","newPost","deletePost","updatePost","LOAD_POSTS","SELECT_POST","RELOAD","LoadSelectedPostAction","payload","type","Reload","AddNewPost","dispatch","useDispatch","useState","setTitle","setBody","handleSubmit","event","preventDefault","className","onSubmit","placeholder","value","onChange","target","addNewComment","newComment","getPostsSelector","state","posts","getSelectedPostSelector","selectedPost","updateSelector","update","AddNewComment","addComment","comment","setComment","PostDetails","getPostsDetails","useSelector","editForm","setEditForm","editTitle","setEditTitle","editBody","setEditBody","isAddCommentsVisible","setAddCommentsVisible","removePost","comments","updatePostInfo","onClick","map","PostList","reload","getPostsFromApi","postsFromServer","useEffect","post","App","selectedPostFromServer","State","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcc4d19b.chunk.js","sourcesContent":["export const API_URL = 'https://bloggy-api.herokuapp.com';\n","import { API_URL } from './api';\n\nexport async function getPosts() {\n  const response = await fetch(`${API_URL}/posts`);\n\n  return response.json();\n}\n\nexport async function getPostById(postId: number) {\n  const response = await fetch(`${API_URL}/posts/${postId}?_embed=comments`);\n\n  return response.json();\n}\n\nexport async function addNewPost(title: string, body: string) {\n  const newPost = await fetch(`${API_URL}/posts`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify({\n      id: Math.floor(Math.random() * 1000),\n      title,\n      body,\n    }),\n  });\n\n  return newPost.json();\n}\n\nexport async function deletePost(postId: number) {\n  const response = await fetch(`${API_URL}/posts/${postId}`, {\n    method: 'DELETE',\n  });\n\n  return response.json();\n}\n\nexport async function updatePost(title: string, body: string, postId: number) {\n  const response = await fetch(`${API_URL}/posts/${postId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify({\n      id: postId,\n      title,\n      body,\n    }),\n  });\n\n  return response.json();\n}\n","export const LOAD_POSTS = 'LOAD_POSTS';\nexport const SELECT_POST = 'SELECT_POST';\nexport const RELOAD = 'RELOAD';\n\nexport const LoadPostsAction = (payload: Post[]) => ({\n  type: LOAD_POSTS,\n  payload,\n});\n\nexport const LoadSelectedPostAction = (payload: SelectedPost | null) => ({\n  type: SELECT_POST,\n  payload,\n});\n\nexport const Reload = () => ({\n  type: RELOAD,\n});\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addNewPost } from '../../api/posts';\nimport { Reload } from '../../store/actions';\nimport './AddNewPost.scss';\n\nexport const AddNewPost: React.FC = () => {\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState('');\n  const [body, setBody] = useState('');\n\n  const clearForm = () => {\n    setTitle('');\n    setBody('');\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (title && body) {\n      await addNewPost(title, body);\n      clearForm();\n      dispatch(Reload());\n    }\n  };\n\n  return (\n    <form\n      className=\"content postForm\"\n      onSubmit={handleSubmit}\n    >\n      <h2>Add new post</h2>\n      <input\n        type=\"text\"\n        className=\"input postForm__input\"\n        placeholder=\"Title\"\n        value={title}\n        onChange={(event) => setTitle(event.target.value)}\n      />\n      <textarea\n        className=\"textarea PostForm__textarea\"\n        placeholder=\"Write here...\"\n        value={body}\n        onChange={(event) => setBody(event.target.value)}\n      />\n      <button\n        type=\"submit\"\n        className=\"button is-primary PostForm__button\"\n      >\n        Post\n      </button>\n    </form>\n  );\n};\n","import { API_URL } from './api';\n\nexport async function addNewComment(postId: number, body: string) {\n  const newComment = await fetch(`${API_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify({\n      postId,\n      body,\n    }),\n  });\n\n  return newComment.json();\n}\n","export const getPostsSelector = (state: State) => state.posts;\nexport const getSelectedPostSelector = (state: State) => state.selectedPost;\nexport const updateSelector = (state: State) => state.update;\n","import React, { useState } from 'react';\nimport './AddNewComment.scss';\n\ntype Props = {\n  addComment: (body: string) => Promise<void>,\n};\n\nexport const AddNewComment: React.FC<Props> = ({ addComment }) => {\n  const [comment, setComment] = useState('');\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (comment) {\n      addComment(comment);\n      setComment('');\n    }\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className=\"commentForm\"\n    >\n      <input\n        type=\"text\"\n        placeholder=\"Write something here\"\n        value={comment}\n        onChange={(event) => setComment(event.target.value)}\n        className=\"input is-info\"\n      />\n\n      <button\n        type=\"submit\"\n        className=\"button is-success\"\n      >\n        Add comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addNewComment } from '../../api/comments';\nimport { deletePost, updatePost } from '../../api/posts';\nimport { LoadSelectedPostAction, Reload } from '../../store/actions';\nimport { getSelectedPostSelector } from '../../store/selectors';\nimport { AddNewComment } from '../AddNewComment';\nimport './PostDetails.scss';\n\ntype Props = {\n  getPostsDetails: (id: number) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({ getPostsDetails }) => {\n  const dispatch = useDispatch();\n  const selectedPost: SelectedPost | null = useSelector(getSelectedPostSelector);\n\n  const [editForm, setEditForm] = useState(false);\n  const [editTitle, setEditTitle] = useState(selectedPost?.title);\n  const [editBody, setEditBody] = useState(selectedPost?.body);\n\n  const [isAddCommentsVisible, setAddCommentsVisible] = useState(false);\n\n  const removePost = async () => {\n    if (selectedPost?.id) {\n      await deletePost(selectedPost.id);\n\n      dispatch(LoadSelectedPostAction(null));\n    }\n\n    dispatch(Reload());\n  };\n\n  const addComment = async (body: string) => {\n    if (selectedPost) {\n      await addNewComment(selectedPost.id, body);\n      dispatch(LoadSelectedPostAction({\n        ...selectedPost,\n        comments: [...selectedPost.comments, {\n          postId: selectedPost.id,\n          body,\n        }],\n      }));\n    }\n\n    dispatch(Reload());\n  };\n\n  const updatePostInfo = async () => {\n    if (editTitle && editBody && selectedPost?.id) {\n      await updatePost(editTitle, editBody, selectedPost?.id);\n      setEditForm(false);\n\n      getPostsDetails(selectedPost.id);\n    }\n\n    dispatch(Reload());\n  };\n\n  if (!selectedPost) {\n    return (\n      <div>\n        <h2>Open some post for details</h2>\n      </div>\n    );\n  }\n\n  const openEditWindow = () => {\n    setEditForm(!editForm);\n    setEditTitle(selectedPost.title);\n    setEditBody(selectedPost.body);\n  };\n\n  return (\n    <div className=\"postDetails\">\n      {!editForm && (\n        <>\n          <h1 className=\"title\">\n            {selectedPost.title}\n          </h1>\n          <p className=\"postDetails__body\">\n            {selectedPost.body}\n          </p>\n        </>\n      )}\n      {editForm && (\n        <>\n          <input\n            type=\"text\"\n            className=\"input PostForm__input\"\n            placeholder=\"Title\"\n            value={editTitle}\n            onChange={(event) => setEditTitle(event.target.value)}\n          />\n          <textarea\n            className=\"textarea PostForm__textarea\"\n            placeholder=\"Write here...\"\n            value={editBody}\n            onChange={(event) => setEditBody(event.target.value)}\n          />\n          <button\n            type=\"button\"\n            className=\"button is-success is-light\"\n            onClick={() => updatePostInfo()}\n          >\n            Save\n          </button>\n        </>\n      )}\n      <ul className=\"postDetails__comments\">\n        {selectedPost.comments.map((comment: PostComment) => (\n          <li key={comment.body} className=\"box\">{comment.body}</li>\n        ))}\n      </ul>\n      {isAddCommentsVisible && <AddNewComment addComment={addComment} />}\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => openEditWindow()}\n          className=\"button is-warning\"\n        >\n          Edit\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setAddCommentsVisible(!isAddCommentsVisible)}\n          className=\"button is-primary\"\n        >\n          Add Comment\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => removePost()}\n          className=\"button is-danger\"\n        >\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPosts } from '../../api/posts';\nimport { LoadPostsAction } from '../../store/actions';\nimport { getPostsSelector, updateSelector } from '../../store/selectors';\nimport './PostList.scss';\n\ntype Props = {\n  getPostsDetails: (id: number) => void,\n};\n\nexport const PostList: React.FC<Props> = ({ getPostsDetails }) => {\n  const dispatch = useDispatch();\n  const posts: Post[] = useSelector(getPostsSelector);\n  const reload: boolean = useSelector(updateSelector);\n\n  const getPostsFromApi = async () => {\n    const postsFromServer = await getPosts();\n\n    dispatch(LoadPostsAction(postsFromServer));\n  };\n\n  useEffect(() => {\n    getPostsFromApi();\n  }, [reload]);\n\n  return (\n    <ul className=\"postList\">\n      {posts.map(post => (\n        <div key={post.id}>\n          <li className=\"box postList__item\">\n            <h1>{post.title}</h1>\n            <p>{post.body}</p>\n            <button\n              type=\"button\"\n              className=\"button is-info\"\n              onClick={() => getPostsDetails(post.id)}\n            >\n              Open post\n            </button>\n          </li>\n        </div>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getPostById } from './api/posts';\nimport './App.scss';\nimport { AddNewPost } from './components/AddNewPost/AddNewPost';\nimport { PostDetails } from './components/PostDetails/PostDetails';\nimport { PostList } from './components/PostList';\nimport { LoadSelectedPostAction } from './store/actions';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const getPostsDetails = async (postId: number) => {\n    const selectedPostFromServer = await getPostById(postId);\n\n    dispatch(LoadSelectedPostAction(selectedPostFromServer));\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"columns\">\n        <div className=\"column\">\n          <PostList getPostsDetails={getPostsDetails} />\n        </div>\n        <div className=\"column\">\n          <PostDetails getPostsDetails={getPostsDetails} />\n          <AddNewPost />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport { LOAD_POSTS, SELECT_POST, RELOAD } from './actions';\n\nconst State: State = {\n  posts: [],\n  selectedPost: null,\n  update: false,\n};\n\nconst reducer = (state = State, action: Action) => {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return {\n        ...state,\n        posts: [...action.payload],\n      };\n\n    case SELECT_POST:\n      return {\n        ...state,\n        selectedPost: action.payload,\n      };\n\n    case RELOAD:\n      return {\n        ...state,\n        update: !state.update,\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}